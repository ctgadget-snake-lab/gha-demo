{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello to my demo page!","text":"<p>This site contains the project documentation for the <code>gha-demo</code> project that is a toy module used in the Real Python tutorial</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Code Reference</li> <li>Explanation</li> </ol>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Info coming soon ...</p>"},{"location":"#project-roadmap","title":"Project Roadmap","text":""},{"location":"tutorials/","title":"Tutorials","text":"<p>In this tutorial, we will guide you through the process of setting up and running a FastAPI application on your local machine. We'll also cover how to test the different endpoints of your FastAPI application.</p>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following prerequisites installed on your system:</p> <ul> <li>Python (version 3.6 or higher)</li> <li>Pip (Python package manager)</li> </ul>"},{"location":"tutorials/#step-1-create-a-virtual-environment","title":"Step 1: Create a Virtual Environment","text":"<p>It's a good practice to work within a virtual environment to isolate your project dependencies. Open your terminal and run the following commands:</p> <pre><code># Create a new directory for your FastAPI project\nmkdir my_fastapi_project\ncd my_fastapi_project\n</code></pre>"},{"location":"tutorials/#create-a-virtual-environment","title":"Create a virtual environment","text":"<p><code>python -m venv venv</code></p>"},{"location":"tutorials/#activate-the-virtual-environment","title":"Activate the virtual environment","text":""},{"location":"tutorials/#on-windows","title":"On Windows:","text":"<p><code>venv\\Scripts\\activate</code></p>"},{"location":"tutorials/#on-macos-and-linux","title":"On macOS and Linux:","text":"<p><code>source venv/bin/activate</code></p>"},{"location":"code/reference/","title":"Code Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>gha-demo</code> project code.</p>"},{"location":"code/reference/#src.app.Item","title":"<code>Item</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents an item with a name and price.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the item.</p> <code>price</code> <code>float</code> <p>The price of the item.</p> Source code in <code>src\\app.py</code> <pre><code>class Item(BaseModel):\n\"\"\"\n    Represents an item with a name and price.\n\n    Attributes:\n        name (str): The name of the item.\n        price (float): The price of the item.\n\n    \"\"\"\n\n    @validator(\"price\")\n    def price_must_be_positive(cls, value):\n\"\"\"\n        Validates that the price is a positive value.\n\n        Args:\n            value (float): The price to be validated.\n\n        Returns:\n            float: The validated price if it is positive.\n\n        Raises:\n            ValueError: If the price is not a positive value.\n        \"\"\"\n        if value &lt;= 0:\n            raise ValueError(f\"we expect price &gt;= 0, we received {value}\")\n        return value\n</code></pre>"},{"location":"code/reference/#src.app.Item.price_must_be_positive","title":"<code>price_must_be_positive(value)</code>","text":"<p>Validates that the price is a positive value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The price to be validated.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The validated price if it is positive.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the price is not a positive value.</p> Source code in <code>src\\app.py</code> <pre><code>@validator(\"price\")\ndef price_must_be_positive(cls, value):\n\"\"\"\n    Validates that the price is a positive value.\n\n    Args:\n        value (float): The price to be validated.\n\n    Returns:\n        float: The validated price if it is positive.\n\n    Raises:\n        ValueError: If the price is not a positive value.\n    \"\"\"\n    if value &lt;= 0:\n        raise ValueError(f\"we expect price &gt;= 0, we received {value}\")\n    return value\n</code></pre>"},{"location":"code/reference/#src.app.create_item","title":"<code>create_item(item)</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Item</code> <p>The item to be created.</p> required <p>Returns:</p> Name Type Description <code>Item</code> <p>The created item.</p> Source code in <code>src\\app.py</code> <pre><code>@app.post(\"/items/\")\ndef create_item(item: Item):\n\"\"\"\n    Create a new item.\n\n    Args:\n        item (Item): The item to be created.\n\n    Returns:\n        Item: The created item.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"code/reference/#src.app.read_user","title":"<code>read_user(user_id)</code>","text":"<p>Get information about a user by their user ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The unique identifier of the user.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the \"user_id\" key with the provided user ID.</p> Source code in <code>src\\app.py</code> <pre><code>@app.get(\"/users/{user_id}\")\ndef read_user(user_id: str):\n\"\"\"\n    Get information about a user by their user ID.\n\n    Args:\n        user_id (str): The unique identifier of the user.\n\n    Returns:\n        dict: A dictionary containing the \"user_id\" key with the provided user ID.\n    \"\"\"\n    return {\"user_id\": user_id}\n</code></pre>"},{"location":"code/reference/#src.app.root","title":"<code>root()</code>","text":"<p>Root endpoint that returns a simple message.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing a \"message\" key with the value \"hello world again\".</p> Source code in <code>src\\app.py</code> <pre><code>@app.get(\"/\")\ndef root():\n\"\"\"\n    Root endpoint that returns a simple message.\n\n    Returns:\n        dict: A dictionary containing a \"message\" key with the value \"hello world again\".\n    \"\"\"\n    return {\"message\": \"hello world again\"}\n</code></pre>"},{"location":"code/reference/#src.app.sleep_fast","title":"<code>sleep_fast()</code>  <code>async</code>","text":"<p>Endpoint that sleeps for 1 second asynchronously and then returns a status message.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing a \"status\" key with the value \"done\" after sleeping.</p> Source code in <code>src\\app.py</code> <pre><code>@app.get(\"/sleep_fast\")\nasync def sleep_fast():\n\"\"\"\n    Endpoint that sleeps for 1 second asynchronously and then returns a status message.\n\n    Returns:\n        dict: A dictionary containing a \"status\" key with the value \"done\" after sleeping.\n    \"\"\"\n    _ = await asyncio.sleep(1)\n    return {\"status\": \"done\"}\n</code></pre>"},{"location":"code/reference/#src.app.sleep_slow","title":"<code>sleep_slow()</code>","text":"<p>Endpoint that sleeps for 1 second synchronously and then returns a status message.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing a \"status\" key with the value \"done\" after sleeping.</p> Source code in <code>src\\app.py</code> <pre><code>@app.get(\"/sleep_slow\")\ndef sleep_slow():\n\"\"\"\n    Endpoint that sleeps for 1 second synchronously and then returns a status message.\n\n    Returns:\n        dict: A dictionary containing a \"status\" key with the value \"done\" after sleeping.\n    \"\"\"\n    _ = time.sleep(1)\n    return {\"status\": \"done\"}\n</code></pre>"}]}